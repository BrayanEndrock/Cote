<!-- /snippets/collection-filter-byob.liquid -->
{%- liquid   
	assign products_per_page = section.settings.products_per_page
	assign boost_translations = shop.metafields.boostpfs-settings.labelTranslations
	assign current_locale = request.locale.iso_code
	assign primary_locale = current_locale
	for locale in shop.published_locales
		if locale.primary
			assign primary_locale = locale.iso_code
			break
		endif
	endfor 
	assign label_toolbar_viewas = boost_translations[current_locale].defaultTheme.toolbarViewAs | default:  boost_translations[primary_locale].defaultTheme.toolbarViewAs | escape
	assign label_items_with_count_one = boost_translations[current_locale].defaultTheme.toolbarProduct | default:  boost_translations[primary_locale].defaultTheme.toolbarProduct | escape
	assign label_items_with_count_other = boost_translations[current_locale].defaultTheme.toolbarProducts | default:  boost_translations[primary_locale].defaultTheme.toolbarProducts | escape
	assign label_sale = boost_translations[current_locale].defaultTheme.productItemSale | default:  boost_translations[primary_locale].defaultTheme.productItemSale | escape
	assign label_soldout = boost_translations[current_locale].defaultTheme.productItemSoldOut | default:  boost_translations[primary_locale].defaultTheme.productItemSoldOut | escape
	assign label_from = boost_translations[current_locale].defaultTheme.productItemFrom | default:  boost_translations[primary_locale].defaultTheme.productItemFrom | escape
    assign products_per_row = section.settings.products_per_row
    assign products_per_row_mobile = section.settings.products_per_row_mobile
    assign show_vendor = section.settings.show_vendor
    assign show_price = section.settings.show_price
    assign show_sale_label = section.settings.show_sale_label
    assign show_sold_out_label = section.settings.show_sold_out_label
    assign active_image_swap = section.settings.active_image_swap
    assign show_sorting = section.settings.show_sorting
    assign show_product_review = section.settings.show_product_review
    assign display_item_swatch = section.settings.display_item_swatch
    assign swatch_color_display_type = section.settings.swatch_color_display_type
    assign swatch_color_event_change_image = section.settings.swatch_color_event_change_image
    assign swatches_color_shape = section.settings.swatches_color_shape
    assign equal_height = section.settings.equal_height
    assign ratio_width_height_other = section.settings.ratio_width_height_other
    assign equal_height_crop_image_position = section.settings.equal_height_crop_image_position
    assign show_lable_by_tag = section.settings.show_lable_by_tag
    assign product_item_type = section.settings.product_item_type
-%}


{%- paginate collection.products by products_per_page -%}         

    <div class="build-your-kit wrapper" id="build-your-kit-sticky">
        <h1 class="byob-title large--hide medium--hide">{{ collection.title | escape }}</h1>
        <img 
            src="{{ 'icon-close-byob.png' | asset_img_url: '10x' }}" 
            srcset="{{ 'icon-close-byob.png' | asset_img_url: '20x' }} 2x" 
            class="byob-close-icon hide close-icon" 
            alt="icon close"
        >
        <h2 class="title-tab hide text-center">
            View your bundle <i class="fas fa-long-arrow-alt-up"></i>
        </h2>
        <div class="selectorMobile choose-quantity">   
            <span class="copy-top">Choose bundle size</span>
            <div class="five-option quantity-option active" data-option="4">
                <span>4</span><span class="product-size-label"> Products</span>
            </div>
            <div class="eight-option quantity-option" data-option="9">
                <span>9</span><span class="product-size-label"> Products</span>
            </div>    
        </div>
        <div class="selectorMobile choose-products">
            <h1 class="title-tab small--hide">Build your bundle</h1>
            <span class="byob-dynamic-discount">15% Off</span>
            <div class="bundle-icons--wrapper">
                {% for i in (1..9) %}
                    <div class="contain-item-bundle" data-product-variant="" >
                        <img 
                            src="https://cdn.shopify.com/s/files/1/0447/4049/files/byob-product-shape.png?v=1648770374"
                            {%- comment -%}data-srcset="{{ 'empty-byob-icon.png' }} 1x, {{ 'empty-byob-icon.png'}} 2x"{%- endcomment -%}
                            data-srcset="https://cdn.shopify.com/s/files/1/0447/4049/files/byob-product-shape.png?v=1648770374"
                            alt="Build Your Own Bundle" 
                            class="lazyload"   
                        > 
                        <span class="remove">x</span>
                    </div>
                {% endfor %}
            </div>
        </div>
        <div class="selectorMobile add-to-cart-actions small--hide">
            <div class="subtotal--wrapper">
                <span>Subtotal</span>
            </div>
            <div class="price-container">
                <del class="before orange">$00.00</del>
                <span class="now orange" data-priceJs="0">$00.00</span>
            </div>
            <span class="btn q cart__checkout disable">
                <span class="cart__checkout--content">
                    Add to Bag
                    <div class="price-container large--hide medium--hide small--show">
                        <del class="before orange">$00.00</del>
                        <span class="now orange">$00.00</span>
                    </div>
                </span>
                <span class="loader hide">
                    <img src="{{ 'ajax-loader.gif'| asset_url }}" alt="Loader">
                </span>
            </span>   
        </div>

        {%- assign max-progress-bar = 100 -%}
        {%- assign progress-bar-break-one = 5.0 -%}
        {%- assign progress-bar-break-one-fill = 50.0 -%}
        {%- assign discount-one-saving = 2.0 -%}
        {%- assign progress-bar-breaks-one = progress-bar-break-one | times: 100 -%}
        {%- assign progress-bar-break-two = 8.0 -%}
        {%- assign progress-bar-break-two-fill = 100.00 -%}
        {%- assign discount-two-saving = 3.25 -%}
        {%- assign progress-bar-breaks-two = progress-bar-break-two | times: 100 -%}
        {%- assign cart_total_price_collection = 0 -%}
        {%- assign cart_total_price_collection_q = 0 -%}
        {%- assign cart_total_price_collection_one_q = 0 -%}
        {%- assign line_total_price = 0 -%}
        {%- assign subs = false -%}
        {%- assign subs_frequency = "1" -%}

        {%- for line_item in cart.items -%}
            {% if line_item.product.available %}
                {%- for line_item_collection in line_item.product.collections -%}
                    {% if line_item_collection.handle == collection.handle %}
                        {%- assign cart_total_price_collection_q = cart_total_price_collection_q | plus: line_item.quantity -%}
                        {%- assign line_total_price = line_item.original_line_price -%} 
                        {%- assign cart_total_price_collection = cart_total_price_collection | plus: line_total_price -%}
                        {%- assign cart_total_price_collection_one_q = cart_total_price_collection_one_q | plus: line_item.quantity -%}
                    {%- endif -%}
                {%- endfor -%}
            {%- endif -%}
        {%- endfor -%}

        {%- assign fill_total_price = 0 -%}
        {%- assign value_total_price = 0 -%}
        {%- assign total_price_saving = 0 -%}

        {% if cart_total_price_collection_q < progress-bar-break-one %}
            {%- assign value_total_price = cart_total_price_collection_q | times: progress-bar-break-one-fill | divided_by: progress-bar-break-one -%}
            {%- assign fill_total_price = value_total_price -%}
        {% endif %}

        {% if cart_total_price_collection_q >= progress-bar-break-one and cart_total_price_collection_q < progress-bar-break-two %}
            {%- assign value_total_price = cart_total_price_collection_q | minus: progress-bar-break-one -%}
            {%- assign value_total_price2 = progress-bar-break-two | minus: progress-bar-break-one -%}
            {%- assign value_total_price3 = progress-bar-break-two-fill | minus: progress-bar-break-one-fill -%}
            {%- assign value_total_price = value_total_price | times: value_total_price3 | divided_by: value_total_price2 -%}
            {%- assign fill_total_price = value_total_price | plus: progress-bar-break-one-fill -%}
            {%- assign total_price_saving = cart_total_price_collection_q | times: discount-one-saving | times: 100 -%}
            {%- assign total_price_saving = cart_total_price_collection | minus: total_price_saving -%}
        {% endif %}

        {% if cart_total_price_collection_q >= progress-bar-break-two %}
            {%- assign fill_total_price = progress-bar-break-two-fill -%}
            {%- assign total_price_saving = cart_total_price_collection_q | times: discount-two-saving | times: 100 -%}
            {%- assign total_price_saving = cart_total_price_collection | minus: total_price_saving -%}
        {% endif %}
    </div>

    <div class="selectorMobile add-to-cart-actions mobile-actions-container medium--hide large--hide">
        <div class="subtotal-container">
            <div class="subtotal--wrapper">
                <span>Subtotal: </span>
            </div>
            <div class="price-container">
                <del class="before orange hide">$00.00</del>
                <span class="now orange" data-priceJs="0">$00.00</span>
            </div>
        </div>
        <div class="checkout-container">
            <span class="btn q cart__checkout disable">
                <span class="cart__checkout--content">
                    Add to Cart
                </span>
                <span class="loader hide">
                    <img src="{{ 'ajax-loader.gif'| asset_url }}" alt="Loader">
                </span>
            </span>
        </div>  
    </div>
    
    {%- comment -%} Collection Template {%- endcomment -%}   
    <div class="byob-collection-template-grid" data-section-type="collection-template">
        {% paginate collection.products by 10000 %}
            <div class="container">
                <div class="page-header cf">
                    {% if section.settings.coll_desc_pos == 'below' %}
                        <h1 class="majortitle small--hide">{{ collection.title | escape }}</h1>
                    {% endif %}
       
                    {% if collection.description != blank %}
                        <div class="user-content lightly-spaced-row {% if settings.lightbox_imgs %}lightboximages{% endif %}">
                            {{ collection.description }}
                        </div>
                    {% endif %}
       
                    {% if section.settings.coll_desc_pos == 'above' %}
                        <h1 class="majortitle small--hide">{{ collection.title | escape }}</h1>
                    {% endif %}
           
                    {% comment %} Which tags should we show, and group them into categories {% endcomment %}
                    {% assign show_normal_filter = false %}
                    {% assign show_custom_filter_1 = false %}
                    {% assign show_custom_filter_2 = false %}
       
                    {% if section.settings.show_tagfilt_custom1 %}
                        {%- assign custom_tag_arr1 = section.settings.tagfilt_custom1_tags | downcase | replace: ', ',',' | split: ',' -%}
                        {%- capture filter1_html -%}
           
                            {%- for s_tag in custom_tag_arr1 -%}
                                {%- for c_tag in collection.all_tags -%}
                                    {%- assign s_tag_lower = s_tag | downcase -%}
                                    {%- assign c_tag_lower = c_tag | downcase -%}
                            
                                    {%- unless tag contains 'meta-' -%}
                                        {%- if s_tag_lower == c_tag_lower -%}
                                            {%- assign show_custom_filter_1 = true -%}
                                                {%- if current_tags contains c_tag -%}
                                                    <li class="active" data-tag="{{c_tag | handleize}}">{{ c_tag | append: ' <span class="x">&times;</span>' | link_to_remove_tag: c_tag }}</li>
                                                {%- else -%}
                                                    <li data-tag="{{c_tag | handleize}}">{{ c_tag | link_to_add_tag: c_tag }}</li>
                                                {%- endif -%}
                                        {%- endif -%}
                                    {%- endunless -%}
                                {%- endfor -%}
                            {%- endfor -%}
                        {%- endcapture -%}
                    {% endif %}
       
                    {% if section.settings.show_tagfilt_custom2 %}
                        {%- assign custom_tag_arr2 = section.settings.tagfilt_custom2_tags | downcase | replace: ', ',',' | split: ',' -%}
                        {%- capture filter2_html -%}
                            {%- for tag in collection.all_tags -%}
                                {%- unless tag contains 'meta-' -%}
                                    {%- assign tag_lower = tag | downcase -%}
                                    {%- if custom_tag_arr2 contains tag_lower -%}
                                        {%- assign show_custom_filter_2 = true -%}
                                        {%- if current_tags contains tag -%}
                                            <li class="active" data-tag="{{tag | handleize}}">{{ tag | append: ' <span class="x">&times;</span>' | link_to_remove_tag: tag }}</li>
                                        {%- else -%}
                                            <li data-tag="{{tag | handleize}}">{{ tag | link_to_add_tag: tag }}</li>
                                        {%- endif -%}
                                    {%- endif -%}
                                {%- endunless -%}
                            {%- endfor -%}
                        {%- endcapture -%}
                    {% endif %}
       
                    {% if section.settings.coll_show_tags %}
                        {%- capture filter_html -%}
                            {%- for tag in collection.all_tags -%}
                                {%- unless tag contains 'meta-' or custom_tag_arr1 contains tag or custom_tag_arr2 contains tag -%}
                                    {%- assign show_normal_filter = true -%}
                                    {%- if current_tags contains tag -%}
                                        <li class="active" data-tag="{{tag | handleize}}">{{ tag | append: ' <span class="x">&times;</span>' | link_to_remove_tag: tag }}</li>
                                    {%- else -%}
                                        <li data-tag="{{tag | handleize}}">{{ tag | link_to_add_tag: tag }}</li>
                                    {%- endif -%}
                                {%- endunless -%}
                            {%- endfor -%}
                        {%- endcapture -%}
                    {% endif %}
       
                    {% if collection.title != "All" %}
                        <div class="filters">
                            {% if section.settings.coll_show_sort %}
                                <span class="sort tags">
                                    <label for="sort-by">{{ 'collections.sorting.title' | t }}</label>
                                    <span class="styled-select styled-select--small">
                                        <select id="sort-by" data-initval="{{ collection.sort_by | default: collection.default_sort_by  }}">
                                            {% if section.settings.coll_show_feat %}
                                                <option value="manual">{{ 'collections.sorting.featured' | t }}</option>
                                            {% endif %}
                                            <option value="price-ascending">{{ 'collections.sorting.price_ascending' | t }}</option>
                                            <option value="price-descending">{{ 'collections.sorting.price_descending' | t }}</option>
                                            <option value="best-selling">{{ 'collections.sorting.best_selling' | t }}</option>
                                        </select>
                                    </span>
                                </span>
                            {% endif %}
                        </div>
                    {% endif %}   
                </div>
            </div>
       
            <!-- TOP COLOR FILTER MENU for ALL COLORS -->
            {% assign excluded_tags = "Non Toxic" | split: "," %}    
            <div class="multi-tag-row">
                <div class="tags nav-row cat-custom-1">
                    <ul id="color_menu">      
                        {%- for coll in collections -%}   
                            {% if coll.metafields.global.is_nail_polish == 'true' %}
                                {% assign tag_color = coll.title | replace: "Nail Polish", "" | strip %}
                                {% if excluded_tags contains tag_color %}
                                    {% continue %}
                                {% endif %}
                                <li data-tag="{{ tag_color | downcase }}s" data-order="{{ coll.metafields.global.color_order }}">
                                    <a href="{{ coll.url }}">{{ tag_color }}s</a>
                                </li>
                            {% endif %}
                        {%- endfor -%}
                    </ul>
                </div>
            </div>
            <script>
                jQuery('#color_menu li').sort(function(a, b) { 
                    var x = parseInt(a.getAttribute('data-order'));
                    var y = parseInt(b.getAttribute('data-order'));
                    return x < y ? -1 : 1; 
                }).appendTo('#color_menu');
            </script>
            <!-- END: TOP COLOR FILTER MENU -->    
    
            <div class="byob-wrapper--container">
                <div class="collection-listing{% if section.settings.coll_gridstream_mode == 'stream' %}-stream{% endif %} cf">
                    <div class="product-list byob-product-list">    
                        {% for product in collection.products %}
                            {% include 'byob-product-grid-item' %}          
                        {% endfor %}
                    </div>
                </div>
            </div>
       {% endpaginate %}   
    </div>                 
{%- endpaginate -%}

<script type="text/javascript">

    let arrayProductsAdd = [];
    let countAdd = 0;

    let url_coupon = false;

    function scriptByob(arrayProductsAdd, countAdd) {

        let toggleByobMobile = document.querySelector(".build-your-kit.wrapper");
        let optionStateMobile = document.querySelectorAll('.selectorMobile');

        document.querySelector(".build-your-kit.wrapper h2.title-tab").addEventListener("click", (e) => {
            toggleByobMobile.classList.toggle("active"); 
            document.querySelector('.close-icon').classList.remove("hide");
            document.querySelector('.close-icon').classList.remove("small--hide");
            for (var i = 0; i < optionStateMobile.length; i++) {
                optionStateMobile[i].classList.toggle("small--hide");
            }
        });

        document.querySelector(".build-your-kit.wrapper .close-icon").addEventListener("click", (e) => {
            toggleByobMobile.classList.toggle("active");
            document.querySelector('.close-icon').classList.toggle('small--hide');
            for (var i = 0; i < optionStateMobile.length; i++) {
                optionStateMobile[i].classList.toggle("small--hide");
            }
        });

        let typeBundle = document.querySelector('.choose-quantity .quantity-option.active span').textContent;

        function bundleQuantity(typeBundle){

            const subtractQuantity = (id) => {

                let total = document.querySelector(`.grid-product[data-first-variant-id="${id}"] input`).getAttribute('data-count-onetime');

                let result = parseInt(total) - 1;

                document.querySelector(`.grid-product[data-first-variant-id="${id}"] input`).setAttribute('data-count-onetime', result);

            }

            let bundleOptionTotal = document.querySelectorAll('.choose-products .contain-item-bundle');

            if (typeBundle == 4) {
                document.querySelector('.selectorMobile.choose-products').classList.add('active-five');
                document.querySelector('.byob-dynamic-discount').innerText = '15% Off';
                url_coupon =  "/discount/BYOB4?redirect=/collections/build-your-own-bundle";
                if (document.querySelector('.selectorMobile.choose-products').classList.contains('active-eight')) {
                    document.querySelector('.selectorMobile.choose-products.active-eight').classList.remove('active-eight');
                }
            } else { 
                document.querySelector('.selectorMobile.choose-products').classList.add('active-eight');
                document.querySelector('.byob-dynamic-discount').innerText = '30% Off'; 
                url_coupon = "/discount/BYOB9?redirect=/collections/build-your-own-bundle";
                if (document.querySelector('.selectorMobile.choose-products').classList.contains('active-five')) {
                    document.querySelector('.selectorMobile.choose-products.active-five').classList.remove('active-five');
                }
            }

            for (var i = 0; i < bundleOptionTotal.length; i++) {
                if (i > parseInt(typeBundle) - 1 ) {
                    if(bundleOptionTotal[i].classList.contains('active')){
                        let id = bundleOptionTotal[i].getAttribute('data-product-variant');
                        subtractQuantity(id);
                    }
                    bundleOptionTotal[i].style.display = 'none';
                    bundleOptionTotal[i].classList.remove('active');
                    bundleOptionTotal[i].removeAttribute('data-product-variant');
                    bundleOptionTotal[i].childNodes[1].setAttribute("src", `https://cdn.shopify.com/s/files/1/0447/4049/files/byob-product-shape.png?v=1648770374`);
                    bundleOptionTotal[i].childNodes[1].setAttribute("srcset", `https://cdn.shopify.com/s/files/1/0447/4049/files/byob-product-shape.png?v=1648770374`);
                } else {
                    bundleOptionTotal[i].style.display = 'block';                
                }
            }

            let totalActiveSelector = document.querySelectorAll('.contain-item-bundle.active');
            let priceNow, priceOld;    

            if (validateAddToCart(document.querySelectorAll('.choose-products .contain-item-bundle.active').length, typeBundle)) {
                let hideBtn = document.querySelectorAll('.addtocart-btn');
                for (var i = 0; i < hideBtn.length; i++) {
                    hideBtn[i].classList.add('hide');
                }                
            } else {
                let hideBtn = document.querySelectorAll('.addtocart-btn');
                for (var i = 0; i < hideBtn.length; i++) {
                    hideBtn[i].classList.remove('hide');
                } 
            }
        }

        function setOptionsLocalStorage() {

            arrayProductsAdd = [];
            let totalProductsAdd = document.querySelectorAll(`.contain-item-bundle.active`);
            for (let i = 0; i < totalProductsAdd.length; i++) {
                let jsonInfo = {};
                jsonInfo['id'] = totalProductsAdd[i].getAttribute('data-product-variant');
                jsonInfo['price'] = totalProductsAdd[i].getAttribute('data-price');
                jsonInfo['img'] = totalProductsAdd[i].childNodes[1].getAttribute('src');
                arrayProductsAdd.push(jsonInfo);
            }
            console.log(arrayProductsAdd);
            localStorage.setItem('itemsAdd', JSON.stringify(arrayProductsAdd));
            localStorage.setItem('priceOld', document.querySelector('.price-container .before').textContent);
            localStorage.setItem('priceNow', document.querySelector('.price-container .now').textContent);
            localStorage.setItem('typeBundle', document.querySelector('.choose-quantity .quantity-option.active span').textContent);
        }

        function validateAddToCart(countActive, typeBundle){
            let state;
            if (countActive == typeBundle) {
                state = true;
                enableaAddCart(state);
            } else {
                state = false;
                enableaAddCart(state);
            }
            function enableaAddCart(stateAddToCart) {
                let btnCart = document.querySelector('.add-to-cart-actions .btn.cart__checkout');
                let mobileBtnCart = document.querySelector('.mobile-actions-container .cart__checkout');
                if (stateAddToCart) {
                    btnCart.classList.remove('disable');
                    mobileBtnCart.classList.remove('disable');
                } else {
                    if (!btnCart.classList.contains('disable') || !mobileBtnCart.classList.contains('disable')) {
                        btnCart.classList.add('disable');
                        mobileBtnCart.classList.add('disable');
                    }
                }
            }

            if(countActive == 0) {
                let hideBtn = document.querySelectorAll('.addtocart-btn');
                let btnRemove = document.querySelectorAll('.deletetocart-btn');
                for (var i = 0; i < hideBtn.length; i++) {
                    if(!hideBtn[i].classList.contains('hide')){
                        hideBtn[i].textContent = 'Add';
                        btnRemove[i].classList.add('hide');
                    }
                } 
            }
        }

        validateAddToCart(document.querySelectorAll('.choose-products .contain-item-bundle.active').length, typeBundle);

        function chooseTypeBundle() {

            let element = document.querySelectorAll('.choose-quantity .quantity-option');
            if (element) {
                element.forEach(function(el, key) {
                    el.addEventListener('click', function () {
                        el.classList.toggle("active");
                        element.forEach(function(ell, els) {
                            if(key !== els) {
                                ell.classList.remove('active');
                            }
                            // console.log(els);
                        });
                        typeBundle = document.querySelector('.choose-quantity .quantity-option.active span').textContent;
                        bundleQuantity(typeBundle);
                    });
                });
            }
        }

        chooseTypeBundle();

        bundleQuantity(typeBundle);

        function updatePrice(five = false, eight = false) {

            let actualPrice = Number(jQuery('.price-container .now').text().replace(",", "").replace("$", "")).toLocaleString('en-US', {minimumFractionDigits: 2}),
                actualPriceNoFormat = document.querySelector('.build-your-kit.wrapper .price-container .now'),
                productsActive = document.querySelectorAll('.choose-products .contain-item-bundle.active'),
                valueProduct = 9,
                totalDiscount = 0;

            if (actualPrice == '0.00') {
                actualPrice = 0;
            }

            let price, oldPrice, priceProduct = 0, priceArray = [], totalPlusArray;

            productsActive.forEach(element => {
                priceProduct = element.getAttribute('data-price');
                priceProduct = Number(priceProduct);
                priceArray.push(priceProduct);
            });

            totalPlusArray = priceArray.reduce((a, b) => a + b, 0);

            if (five) {
                totalDiscount = (totalPlusArray / 100) * 15;
                price = totalPlusArray - totalDiscount;
                oldPrice = totalPlusArray;
            } else if(eight) {
                totalDiscount = (totalPlusArray / 100) * 30;
                price = totalPlusArray - totalDiscount;
                oldPrice = totalPlusArray;
            } else {
                price = totalPlusArray;
                oldPrice = price;
            }
        
            actualPriceNoFormat.setAttribute('data-pricejs', price);
	        jQuery('.price-container .now').text('$'+ Number(price).toLocaleString('en-US', {minimumFractionDigits: 2}) );
            jQuery('.price-container .before').text('$'+ Number(oldPrice).toLocaleString('en-US', {minimumFractionDigits: 2}) );
        }

        function addProductsToBar(variantId, imageProduct, myNodeList, productPrice){

            for (var i = 0; i < myNodeList.length; i++) {
                if (myNodeList[i].classList.contains("active")) {
                
                } else {
                    myNodeList[i].setAttribute("data-product-variant", variantId);
                    myNodeList[i].setAttribute("data-price", productPrice);
                    myNodeList[i].classList.add('active');
                    myNodeList[i].childNodes[1].setAttribute("data-srcset", imageProduct);
                    myNodeList[i].childNodes[1].setAttribute("src", imageProduct);
                    myNodeList[i].childNodes[1].setAttribute("srcset", imageProduct);
                    break;
                }
            }
        }

        function validateOptionsActive() {

            let selectorActive = document.querySelectorAll('.contain-item-bundle.active').length;
            let typeBundleSelect = document.querySelector('.choose-quantity .quantity-option.active').getAttribute('data-option');
            if (selectorActive == typeBundleSelect) {
                return true
            } else {
                return false
            }
        }
        if (validateOptionsActive()) {
            let hideBtn = document.querySelectorAll('.addtocart-btn');
            for (var i = 0; i < hideBtn.length; i++) {
                hideBtn[i].classList.add('hide');
            }                
        }

        function addToCartProducts() {
            let viewData = {
                items: []
            };
            let slides = $('.contain-item-bundle.active');
            let unit = 1;
            for (let i = 0; i < slides.length; i++) {
                let tempQty = 0;
                let prodId = document.querySelectorAll(`.choose-products [data-product-variant="${slides[i].getAttribute('data-product-variant')}"]`);
                let comp = slides[i].getAttribute('data-product-variant');
                for (let i = 0; i < prodId.length; i++) {
                    if (prodId[i].classList.contains('active')) {
                        tempQty++;
                    }
                }
                let state_add = false;
                for (let e = 0; e < viewData.items.length; e++) {
                    if (viewData.items[e].id == comp ){
                        state_add = true;
                    }    
                }
                if(!state_add){
                    var jsonData = {};
                    jsonData['quantity'] = tempQty * unit ;
                    jsonData['id'] = slides[i].getAttribute('data-product-variant');
                    jsonData['properties'] = {
                        'promotion': 'single'
                    }
                    viewData.items.push(jsonData);
                } 
            }
            console.log("viewData.items");
            console.log(viewData.items);
            var obj=$(this);
            $.ajax({
                type: "POST",
                url: "/cart/clear.js",
                data: "",
                async: false,
                dataType: "json",
                success: function(t) {
                    console.log('Clean Cart');
                    $.ajax({
                        type: 'POST',
                        url: '/cart/add.js',
                        data: {
                            items : viewData['items']
                        },
                        dataType: 'json', 
                        success: function (data) {
                            $.ajax({
                                type: "GET",
                                url: url_coupon,
                                success: function() {
                                    window.location.href  = "/checkout";
                                    /*goCart.fetchAndOpenCart();*/
                                }      
                            });
                        }
                    });
                }
            });
        }

        document.querySelector(".cart__checkout.btn").addEventListener("click", (e) => {
            document.querySelector('.add-to-cart-actions .cart__checkout .cart__checkout--content').classList.add('hide');
            document.querySelector('.add-to-cart-actions .cart__checkout .loader').classList.remove('hide');
            addToCartProducts();
        });

        document.querySelector(".mobile-actions-container .cart__checkout").addEventListener("click", (e) => {
            document.querySelector('.mobile-actions-container .cart__checkout .cart__checkout--content').classList.add('hide');
            document.querySelector('.mobile-actions-container .cart__checkout .loader').classList.remove('hide');
            addToCartProducts();
        });

        function configProductAfterClick(variantId, minus = false){

            let productsSelectorInput = document.querySelector(`.grid-product input[name='updates--${variantId}']`);
            let gridProduct = document.querySelector(`.grid-product[data-first-variant-id="${variantId}"]`);
            let count = productsSelectorInput.getAttribute('data-count-onetime');
            if (minus) {
                count = parseInt(count) - 1;
            } else {
                count = parseInt(count) + 1;
            }
            console.log(count);
            productsSelectorInput.setAttribute('data-count-onetime', count );
            let cartCountProduct = document.querySelector(`.grid-product__wrapper .cart-count-product[data-id="${variantId}"]`);
            // cartCountProduct.textContent = count;
            // cartCountProduct.classList.remove('hide');
            let alldelete = gridProduct.querySelectorAll('.deletetocart-btn');
            let allRemove = gridProduct.querySelectorAll('.addtocart-btn');
            if( count > 0) {
                for (var i = 0; i < alldelete.length; i++) {
                    alldelete[i].classList.remove('hide');
                    allRemove[i].textContent = 'Add another';
                }
            } else {
                gridProduct.querySelector('.deletetocart-btn').classList.add('hide');
                gridProduct.querySelector('.addtocart-btn').textContent = 'Add';
                for (var i = 0; i < alldelete.length; i++) {
                    alldelete[i].classList.add('hide');
                    allRemove[i].textContent = 'Add';
                }
            }
        }

        function removeProduct(idProduct){
            let elementActive;
            elementActive = document.querySelector(`.contain-item-bundle[data-product-variant='${idProduct}']`);
            elementActive.classList.remove('active');
            elementActive.childNodes[1].setAttribute("src", `https://cdn.shopify.com/s/files/1/0447/4049/files/empty.png?v=1644950097`);
            elementActive.childNodes[1].setAttribute("srcset", `https://cdn.shopify.com/s/files/1/0447/4049/files/byob-product-shape.png?v=1648770374`);
            elementActive.removeAttribute('data-product-variant');
        }

        function functionRemoveFromBar(idElement, targetElement) {

            let elementRemove = document.querySelector(`.contain-item-bundle[data-product-variant="${idElement}"]`);
            let elementGrid = document.querySelector(`.grid-product[data-first-variant-id="${idElement}"]`);
            let countGridAdd, countFinal;

            targetElement.childNodes[1].setAttribute("src", `https://cdn.shopify.com/s/files/1/0447/4049/files/byob-product-shape.png?v=1648770374`);
            targetElement.childNodes[1].setAttribute("srcset", `https://cdn.shopify.com/s/files/1/0447/4049/files/byob-product-shape.png?v=1648770374`);
            targetElement.classList.remove('active');
            targetElement.removeAttribute('data-product-variant');

            countGridAdd = elementGrid.childNodes[1].getAttribute('data-count-onetime');
            countFinal = parseInt(countGridAdd) - 1;
            elementGrid.childNodes[1].setAttribute("data-count-onetime", countFinal);

            if (countFinal == 0) {
                let alldelete = elementGrid.querySelectorAll('.deletetocart-btn');
                let allRemove = elementGrid.querySelectorAll('.addtocart-btn');
                for (var i = 0; i < alldelete.length; i++) {
                    alldelete[i].classList.add('hide');
                    allRemove[i].textContent = 'Add';
                }
            }

            countAdd--;

            validateAddToCart(countAdd, typeBundle);

            let stateAcives = validateOptionsActive();

            if (!stateAcives) {
                let hideBtn = document.querySelectorAll('.addtocart-btn');
                for (var i = 0; i < hideBtn.length; i++) {
                    hideBtn[i].classList.remove('hide');
                }
            }

            let quantityActive = document.querySelectorAll('.contain-item-bundle.active');

            if(quantityActive.length >= 4){
                let promotionFive = true;
                let promotionEight = false;
                if (quantityActive.length >= 9) {
                    promotionEight = true;
                    updatePrice(promotionFive, promotionEight);
                } else {
                    updatePrice(promotionFive);
                }
            } else {
                updatePrice();
            }
            setOptionsLocalStorage();
        }

        function actionItemRemoveFromBar(){
            document.querySelectorAll('.contain-item-bundle.active .remove').forEach(item => {
            item.addEventListener("click", (e) => {
                let targetElement = e.target.parentNode;
                let idElement = e.target.parentNode.getAttribute('data-product-variant');
                functionRemoveFromBar(idElement,targetElement);
            });
        });
    }

    document.querySelectorAll('.grid-product__wrapper .addtocart-btn').forEach(item => {
        item.addEventListener("click", (e) => {

            console.log(`type bundle ${typeBundle}`);

            let variantId = e.target.getAttribute('data-id'),
                productPrice = e.target.getAttribute('data-price'),
                imageProduct = e.target.getAttribute('data-image-render'),
                myNodeList = document.querySelectorAll('.choose-products .contain-item-bundle'),
                productsSelector = document.querySelectorAll('.grid-product');

            // Function to add the selected product to the top bar, where the active bundles are located.
            addProductsToBar(variantId, imageProduct, myNodeList, productPrice);

            configProductAfterClick(variantId);


            countAdd++;

            let stateAcives = validateOptionsActive();

            if (stateAcives) {
                let hideBtn = document.querySelectorAll('.addtocart-btn');
                for (var i = 0; i < hideBtn.length; i++) {
                    hideBtn[i].classList.add('hide');
                }                
            }

            validateAddToCart(document.querySelectorAll('.choose-products .contain-item-bundle.active').length, typeBundle);


            let quantityActive = document.querySelectorAll('.contain-item-bundle.active');

            if(quantityActive.length >= 4 ){
                let promotionFive = true;
                let promotionEight = false;
                if (quantityActive.length >= 9) {
                    promotionEight = true;
                    updatePrice(promotionFive, promotionEight);
                }else{
                    updatePrice(promotionFive, promotionEight);
                }
            }else{
                updatePrice(promotionFive = false, promotionEight = false);
            }

            actionItemRemoveFromBar();

            // set Local Storage

            setOptionsLocalStorage();
            

        });
    });

    actionItemRemoveFromBar();

    document.querySelectorAll('.grid-product__wrapper .deletetocart-btn').forEach(item => {
        item.addEventListener("click", (e) => {

            // console.log(typeBundle);

            let variantId = e.target.getAttribute('data-id');
            let productPrice = e.target.getAttribute('data-price');
            let imageProduct = e.target.getAttribute('data-image-render');
            let myNodeList = document.querySelectorAll('.choose-products .contain-item-bundle');
            let productsSelector = document.querySelectorAll('.grid-product');



            removeProduct(variantId);

            let minus = true;

            configProductAfterClick(variantId, minus);

            let quantityActive = document.querySelectorAll('.contain-item-bundle.active');

            countAdd--;

            if(quantityActive.length >= 4 ){
                let promotionFive = true;
                let promotionEight = false;
                if (quantityActive.length >= 9) {
                    promotionEight = true;
                    updatePrice(promotionFive, promotionEight);
                }else{
                    updatePrice(promotionFive);
                }
            }else{
                updatePrice();
            }

            let stateAcives = validateOptionsActive();

            if ( !stateAcives ) {
                let hideBtn = document.querySelectorAll('.addtocart-btn');
                for (var i = 0; i < hideBtn.length; i++) {
                    hideBtn[i].classList.remove('hide');
                }
            }

            validateAddToCart(document.querySelectorAll('.choose-products .contain-item-bundle.active').length, typeBundle);

            setOptionsLocalStorage();

        });
    });
		
    document.querySelectorAll('.grid-product__wrapper .showmore-btn').forEach(item => {
        item.addEventListener("click", (e) => {
            Swal.fire({
                title: e.target.getAttribute('data-title'),
                html: e.target.getAttribute('data-description'),
                imageUrl: e.target.getAttribute('data-image'),
                imageWidth: 200,
                imageAlt: e.target.getAttribute('data-title'),
                animation: true,
                showConfirmButton: false,
                showCloseButton: true,
                customClass: 'swalProduct'
		    });
        });
    });

    return countAdd;
     
  }
  

    const getLocalStorage = (countAdd, changeGrid = false) => {

        function countDuplicate(arr, id) {
            let count = 0;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i]['id'] == id) {
                    count++
                }
            }

            return count

        }


        function actionItemRemoveFromBar() {
            document.querySelectorAll('.contain-item-bundle.active .remove').forEach(item => {
                item.addEventListener("click", (e) => {

                    let targetElement = e.target.parentNode;
                    let idElement = e.target.parentNode.getAttribute('data-product-variant');
                    
                });
            });
        }

        arrayProductsAdd = JSON.parse(localStorage.getItem('itemsAdd')); 
          
        if(arrayProductsAdd === null || Object.keys(arrayProductsAdd).length === 0 ){

        } else {
            let totalArray =  arrayProductsAdd.length,
                containsItemBundle = document.querySelectorAll('.contain-item-bundle'),
                id,image,totalAdd;

                for (let i = 0; i < containsItemBundle.length; i++) {
                    if (i < arrayProductsAdd.length) {

                        id = arrayProductsAdd[i]['id'];
                        image = arrayProductsAdd[i]['img'];
                        price = arrayProductsAdd[i]['price'];
                        containsItemBundle[i].classList.add('active');
                        containsItemBundle[i].childNodes[1].setAttribute("src", image);
                        containsItemBundle[i].childNodes[1].setAttribute("data-srcset", image);
                        containsItemBundle[i].childNodes[1].setAttribute("srcset", image);
                        containsItemBundle[i].setAttribute("data-product-variant", id),
                        containsItemBundle[i].setAttribute("data-price", price);

                        totalAdd = countDuplicate(arrayProductsAdd, id);

                        configProductGrid(id,totalAdd);

                    } else {
                        containsItemBundle[i].classList.remove('active');
                    }
			    }
            

            

            let priceOld = localStorage.getItem('priceOld'),
                priceNow = localStorage.getItem('priceNow');

            console.log(`Price old ${priceOld} - Price Now ${priceNow}`);

            document.querySelector('.price-container .before').textContent = priceOld;
            document.querySelector('.price-container .now').textContent = priceNow;

            countAdd = totalArray;

            let bundleType = localStorage.getItem('typeBundle');

            if (bundleType == '5') {
                document.querySelector('.choose-quantity .eight-option').classList.remove('active');
                document.querySelector('.choose-quantity .five-option').classList.add('active');
                
            }

        }

        function configProductGrid(id,totalAdd){
            let grid = document.querySelector(`.grid-product[data-first-variant-id="${id}"]`);
            if (grid === null) {
                
            }else{
                let gridBtnAdd = grid.querySelectorAll('.addtocart-btn');
                let gridbtnRemove = grid.querySelectorAll('.deletetocart-btn');

                grid.querySelector('input').setAttribute('data-count-onetime', totalAdd);

                for (let i = 0; i < gridBtnAdd.length; i++) {
                    gridBtnAdd[i].textContent = 'Add another';
                    gridbtnRemove[i].classList.remove('hide');
                }
            }
        }

        return countAdd
    
    }

    document.addEventListener('DOMContentLoaded', (event) => {
        getLocalStorage(countAdd);
        countAdd = getLocalStorage(countAdd);
        scriptByob(arrayProductsAdd,countAdd);
    }); 


    // const notifyFunctionGridFilter = () => {

    //     let selectorGrid = document.querySelectorAll('.grid-app.grid-product');

    //     for (let i = 0; i < selectorGrid.length; i++) {
    //         if (selectorGrid[i].querySelector('.addtocart-btn').classList.contains('sold-out')) {
                
    //             let id = selectorGrid[i].getAttribute('data-first-variant-id');
    //             let handle = selectorGrid[i].getAttribute('data-handle');

    //             selectorGrid[i].querySelector('.addtocart-btn').classList.add('hide');

    //             let button = document.createElement('a');
    //             button.classList.add('BIS_trigger', 'btn');
    //             button.setAttribute('data-variant-id', id);

    //             jQuery.getJSON(`https://touchland.com/products/${handle}.js`, function(product) {
    //                 button.setAttribute('data-product-data', JSON.stringify(product));
    //             } ); 

                
    //             button.setAttribute('href', '#');
    //             button.setAttribute('id', 'BIS_trigger');
    //             button.innerHTML = "Notify me when available";

    //             selectorGrid[i].querySelector('.option-contain').appendChild(button);

    //         }
    //     }

    // }
  </script>